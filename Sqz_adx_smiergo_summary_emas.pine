//@version=4
strategy(title="Sqz_ADX_CCI_SMI_EMAs Strategy", shorttitle="Sqz_ADX_CCI_SMI_EMAs", overlay=true, pyramiding=1,  
  calc_on_every_tick=true,initial_capital=2000000,default_qty_type=strategy.percent_of_equity, default_qty_value=100)

show_fire_alert = true
show_comb_alert=true
show_adx_alert = true
show_erg_alert = true
show_summ_alert = true

show_strong_trend_alert = false


show_sqz = true
show_combined_trending = true // show only with non-neutral trends if true.

show_only_strong_ob_os_trends = false  // Show only OB/OS strong trends if true.
strict_sect_check = false

show_comm = true
show_eq = true


// OSc Code Consts

UP = 1
DOWN = 2
NEUTRAL = 0

YELLOW=1
RED=2
ORANGE=3
NOSQZ=0


OB_SECT = 1
OBM_SECT = 2
OSM_SECT = 3
OS_SECT = 4


//---
OB = 70
OS = 30
MAX= 100
MIN=0
MID = (OB + OS)/2
avg_tr = MAX - MIN
rad2degree=180/3.14159265359
lookback_period = 1
smoothing = 3
stoch_smooth_k = 3
stoch_smooth_d = 3


//Sqz Code variables
source = close

calc_sqz()=>
    length = 20
    ma = sma(source, length)
    devBB = stdev(source, length)
    devKC = sma(tr, length)
    
    
    //Bollinger 2x
    upBB = ma + devBB * 2
    lowBB = ma - devBB * 2
    
    //Keltner 2x
    upKCWide = ma + devKC * 2
    lowKCWide = ma - devKC * 2
    
    //Keltner 1.5x
    upKCNormal = ma + devKC * 1.5
    lowKCNormal = ma - devKC * 1.5
    
    //Keltner 1x
    upKCNarrow = ma + devKC
    lowKCNarrow = ma - devKC
    
    sqzOnWide = lowBB >= lowKCWide and upBB <= upKCWide  //WIDE SQUEEZE: ORANGE
    sqzOnNormal = lowBB >= lowKCNormal and upBB <= upKCNormal  //NORMAL SQUEEZE: RED
    sqzOnNarrow = lowBB >= lowKCNarrow and upBB <= upKCNarrow  //NARROW SQUEEZE: YELLOW
    sqzOffWide = lowBB < lowKCWide and upBB > upKCWide  //FIRED WIDE SQUEEZE
    sqzOffNormal = lowBB < lowKCNormal and upBB > upKCNormal  //FIRED NORMAL SQUEEZE
    sqzOffNarrow = lowBB < lowKCNarrow and upBB > upKCNarrow  //FIRED NARROW SQUEEZE
    noSqz = sqzOnWide == false and sqzOffWide == false  //NO SQUEEZE
    
    fire_code = sqzOffNarrow and sqzOnNarrow[1] ? YELLOW :
       sqzOffNormal and sqzOnNormal[1] ? RED :
       sqzOffWide and sqzOnWide[1] ? ORANGE : NOSQZ
    
    
    sqzcolornum = noSqz ? NOSQZ : sqzOnNarrow ? YELLOW : 
     sqzOnNormal ? RED : sqzOnWide ? ORANGE : NOSQZ

    
    [sqzcolornum,fire_code]
        

//------ End of Sqz Code--------

get_section_code(osc_val)=>
    osc_val >= OB ? OB_SECT : (osc_val < OB and osc_val >= MID) ? OBM_SECT :  (osc_val < MID and osc_val >= OS) ? OSM_SECT : OS_SECT

decodeSectionCode(st) => 
    st == OB_SECT ? 'OB' : st == OBM_SECT ? 'OBM' : st == OSM_SECT ?  'OSM' : 'OS'

decodeSqzColorCode(st) => 
    col= st == YELLOW ? color.yellow : st == RED ? color.red : st == ORANGE ? color.orange : color.gray
    txt = st == YELLOW ? 'Yellow' : st == RED ? 'Red' : st == ORANGE ? 'Orange' : 'Nosqz'
    [txt, col]

decodeMovementCode(st) => 
    col = st == UP ? color.aqua : st == DOWN ? color.red : color.gray
    txt = st == UP ? 'Up' : st == DOWN ? 'Down' : 'Neutral'
    [txt, col]


angle(_src,osc_avg_tr) =>
    ang=rad2degree*atan((_src-nz(_src[lookback_period]))/(lookback_period*osc_avg_tr))
    
get_osc_movement_with_params(osc, osc_ft, osc_cut_off,osc_avg_atr,osc_MAX,osc_MIN) =>
    osc_fb = -osc_ft
    osc_slope = linreg(angle(osc,osc_avg_atr), smoothing, 0)
    trend = osc_slope > osc_ft or osc >= (osc_MAX - osc_cut_off) ? UP: osc_slope < osc_fb or osc <= (osc_MIN + osc_cut_off) ? DOWN : NEUTRAL
    sect = get_section_code(osc)
    [sect,trend]

get_osc_movement(osc, osc_ft, osc_cut_off) => get_osc_movement_with_params(osc, osc_ft, osc_cut_off,avg_tr,MAX,MIN)


calc_cci() =>
    // CCI Stoch Slope
    cci_period = 14
    stoch_period = 14
    cci_cut_off = 5
    cci_ft = 2

    cci = cci(source, cci_period)
    stoch_cci_k = sma(stoch(cci, cci, cci, stoch_period), stoch_smooth_k)
    stoch_cci_d = sma(stoch_cci_k, stoch_smooth_d)
    cci_s = stoch_cci_d
    
    get_osc_movement(cci_s,cci_ft,cci_cut_off)


calc_smi() =>
    //Momentum Oscillator Stoch
    mom_length = 13
    mom_stoch_period = 10
    mom_cut_off = 5
    mom_ft = 1.75

    // mom = source - avg(avg(highest(high, mom_length), lowest(low, mom_length)), sma(source, mom_length))
    // stoch_mom_k = sma(stoch(mom, mom, mom, mom_stoch_period), stoch_smooth_k)
    // stoch_mom_d = sma(stoch_mom_k, stoch_smooth_d)
    // mom_s = stoch_mom_d
    
    mom_highest = highest(high, mom_length)
    mom_lowest = lowest(low, mom_length)
    mom_ma = ema(source, mom_length)
    mom_range = mom_highest - mom_lowest
    
    mom_avgmid = avg(mom_highest,mom_lowest)
    
    mom = source - avg(mom_avgmid,mom_ma)
    
    smi = avg(200 * mom/mom_range , 100)
    stoch_mom_d = sma(sma(smi,stoch_smooth_k),stoch_smooth_d)
    mom_s = stoch_mom_d
    
    get_osc_movement(mom_s, mom_ft, mom_cut_off)


// ADX Code

ADX_NEUTRAL = 0
ADX_LONG = 1 
ADX_SHORT = 2  
ADX_ENTER_LONG =3
ADX_ENTER_SHORT = 4 
ADX_EXIT_LONG  =5
ADX_EXIT_SHORT  = 6


decodeADXCode(adx_code)=>
    adx_col = adx_code == ADX_EXIT_LONG ? color.new(color.yellow,transp= 0) : adx_code == ADX_EXIT_SHORT ? color.new(color.blue,transp= 0) :  
       adx_code == ADX_ENTER_LONG ? color.new(color.lime,transp= 0) : adx_code == ADX_ENTER_SHORT ? color.new(color.red,transp=0) :  
       adx_code == ADX_LONG ? color.new(color.aqua,transp= 60) : adx_code == ADX_SHORT ? color.new(color.orange,transp= 60) : color.new(color.gray,transp= 60)
     
    
    adx_txt = adx_code == ADX_EXIT_LONG ? 'ExUp' : adx_code == ADX_EXIT_SHORT ? 'ExDn' :  
       adx_code == ADX_ENTER_LONG ? 'EnUp' : adx_code == ADX_ENTER_SHORT ? 'EnDn' :  
       adx_code == ADX_LONG ? 'Up' : adx_code == ADX_SHORT ? 'Dn' : 'Na'
     
    [adx_txt,adx_col]



RANGE_BACK_BARS = 100


calc_ADX() =>
    adx_len = 14
    adx_lensig = 14
    
    // Get ADX, PDI and MDI values
    [plus, minus, adx] = dmi(adx_len, adx_lensig)
    
    adx_MAX=highest(adx,RANGE_BACK_BARS)
    adx_MIN=lowest(adx,RANGE_BACK_BARS)
    
    
    adx_avg_tr =  adx_MAX - adx_MIN
    adx_cut_off= 0
    
    adx_filter_range = 2.55
    
    adx_ft = adx_filter_range
    adx_fb = -adx_filter_range
    
    
    adxentrylevel = 39
    adxlowerlevel = 9
    
    
    [dummy_sect, adx_trend] = get_osc_movement_with_params(adx,adx_ft,adx_cut_off, adx_avg_tr,adx_MAX,adx_MIN)
    
    diPositive = plus > minus
    diNegative = not diPositive
    
    adxinside = (diPositive and adx >= minus and adx <= plus) or (diNegative and adx >= plus and adx <= minus)
    
    adxvalidtrend = adx_trend == UP or adx_trend == NEUTRAL 
    
    adxvalidtrendentry = (adx >= adxlowerlevel and adx <= adxentrylevel) or adxinside
     
    buyCond = diPositive and adxvalidtrend
    sellCond = diNegative and adxvalidtrend
    
    
    adxJustCrossed = cross(adx, plus) or cross(adx, minus)
    
    adxjustout = (adxinside[1] and not adxinside)
    adxjustin = (not adxinside[1] and adxinside)
    
    di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1]) 
    
    
    validlongentry = buyCond and adxvalidtrendentry
    validshortentry = sellCond and adxvalidtrendentry
    
    noTradeZone = not adxvalidtrend or di_crossover
    
    
    // get_active_position() =>
    active_position = false
    active_position := ((validlongentry or validshortentry) and not active_position[1] ? true : noTradeZone ? false : active_position[1])
    active_position

    //active_position = get_active_position()
    
    enterLong = validlongentry  and not active_position[1]
    enterShort =  validshortentry and not active_position[1]
    
    
    longpos = buyCond  and  active_position
    shortpos = sellCond and active_position
    
    
    exitLong = noTradeZone and longpos[1]
    exitShort = noTradeZone and shortpos[1]
    
    adx_status_code = exitLong ? ADX_EXIT_LONG : exitShort ? ADX_EXIT_SHORT :  
     enterLong ? ADX_ENTER_LONG : enterShort ? ADX_ENTER_SHORT :  
     longpos ? ADX_LONG : shortpos ? ADX_SHORT : ADX_NEUTRAL
     
    adx_status_code



//----- SMI Ergo

calc_SMI_Erg()=>
    erg_longlen =14
    erg_shortlen = 8
    erg_siglen = 14
    erg_smoothing = 3
    
    erg1 = tsi(source, erg_shortlen, erg_longlen)
    
    erg = ema(erg1,erg_smoothing)
    
    sig = ema(erg1, erg_siglen)
    
    
    erg_MAX=highest(erg,RANGE_BACK_BARS)
    erg_MIN=lowest(erg,RANGE_BACK_BARS)
    
    erg_MID = (erg_MAX + erg_MIN)/2
    
    erg_avg_tr =  erg_MAX - erg_MIN
    erg_cut_off= 0
    
    erg_filter_range = 2.75
    
    entryrange = 0.45 * erg_avg_tr
    
    
    erg_ft = erg_filter_range
    erg_fb = -erg_filter_range
    
    [d_txt, erg_trend] = get_osc_movement_with_params(erg,erg_ft,erg_cut_off, erg_avg_tr,erg_MAX,erg_MIN)

    erg_validlong = erg < erg_MID + entryrange and erg_trend == UP
    erg_validshort = erg > erg_MID - entryrange and erg_trend == DOWN
    
    erg_diPositive = erg > sig
    erg_diNegative = not erg_diPositive
    
    
    erg_di_crossover = (erg_diNegative[1] and erg_diPositive) or (erg_diNegative and erg_diPositive[1]) 
    
    
    erg_buyCond = erg_diPositive and erg_trend != DOWN
    erg_sellCond = erg_diNegative and erg_trend != UP
    
    
    ergvalidtrend = erg_buyCond or erg_sellCond
    
    erg_validlongentry = erg_buyCond and erg_validlong 
    erg_validshortentry = erg_sellCond and erg_validshort
    
    erg_noTradeZone = not ergvalidtrend or erg_di_crossover 
    
    
    erg_active_position = false
    erg_active_position := ((erg_validlongentry or erg_validshortentry) and not erg_active_position[1] ? true : erg_noTradeZone ? false : erg_active_position[1])
    
    
    erg_enterLong = erg_validlongentry  and not erg_active_position[1] 
    erg_enterShort =  erg_validshortentry and not erg_active_position[1]
    
    
    erg_longpos = erg_buyCond  and  erg_active_position
    erg_shortpos = erg_sellCond and erg_active_position
    
    
    erg_exitLong = erg_noTradeZone and erg_longpos[1] 
    erg_exitShort = erg_noTradeZone and erg_shortpos[1]
    
    
    erg_status_code = erg_exitLong ? ADX_EXIT_LONG : erg_exitShort ? ADX_EXIT_SHORT :  
     erg_enterLong ? ADX_ENTER_LONG : erg_enterShort ? ADX_ENTER_SHORT :  
     erg_longpos ? ADX_LONG : erg_shortpos ? ADX_SHORT : ADX_NEUTRAL
     
    erg_status_code


get_trend_num(trend_code) =>
    trend_code == UP ? 1 : trend_code == DOWN ? -1 : 0


get_combined_trend_num(mom_code,cci_code) =>
    get_trend_num(mom_code) + get_trend_num(cci_code)


get_combined_trend(mom_code,cci_code,mom_sect_code, cci_sect_code) =>
    trend_dir = NEUTRAL
    ob_os_flag = false
    
    if mom_code == cci_code
        any_nonOS_flag = strict_sect_check? (mom_sect_code != OS_SECT or cci_sect_code != OS_SECT)  : true
        any_nonOB_flag = strict_sect_check ? (mom_sect_code != OB_SECT or cci_sect_code != OB_SECT) : true
        
        any_ob_sect_flag = mom_sect_code == OB_SECT or cci_sect_code == OB_SECT
        any_os_sect_flag = mom_sect_code == OS_SECT or cci_sect_code == OS_SECT
        
        if cci_code == DOWN and any_nonOS_flag
            trend_dir := DOWN
            ob_os_flag := any_ob_sect_flag
            
        else if cci_code == UP and any_nonOB_flag
            trend_dir := UP
            ob_os_flag := any_os_sect_flag
    
    
    
    combined_trend_num = get_combined_trend_num(mom_code,cci_code)

    // fire = fireup or firedown
    
    // activefire = false
    
    // for i=0 to 4
    //     if fire[i]
    //         activefire := true
    //         activefire
    
    diPositive = combined_trend_num >=1
    diNegative = combined_trend_num <= -1 
    diNeutral = combined_trend_num == 0
    
    
    buyCond = diPositive
    sellCond = diNegative
    
    
    validtrend = buyCond or sellCond
    validentry = abs(combined_trend_num) == 2
    
    validlongentry = buyCond and validentry //and current_trend == UP     //and activefire //and current_trend == UP
    validshortentry = sellCond and validentry //and current_trend == DOWN //and activefire //and current_trend == DOWN
    
    
    
    active_position = false
    active_position := active_position[1]
    
    enterLong = validlongentry  and not active_position
    enterShort =  validshortentry and not active_position
    
    
    active_position := (enterLong or enterShort) ? true :  active_position
    
    longpos = false
    shortpos = false
    
    longpos := (buyCond or (diNeutral and longpos[1])) and  active_position 
    shortpos := (sellCond  or (diNeutral and shortpos[1]) )and  active_position
    
    di_crossover = longpos[1] and diNegative or shortpos[1] and diPositive 
    noTradeZone =  di_crossover //or not validtrend 
    
    exitLong = noTradeZone and longpos[1] 
    exitShort = noTradeZone and shortpos[1]
    
    
    active_position := noTradeZone ? false : active_position
    
    
    combined_status_code = exitLong ? ADX_EXIT_LONG : exitShort ? ADX_EXIT_SHORT :  
         enterLong ? ADX_ENTER_LONG : enterShort ? ADX_ENTER_SHORT :  
         longpos ? ADX_LONG : shortpos ? ADX_SHORT : ADX_NEUTRAL
    
    
    [trend_dir, ob_os_flag, combined_status_code]


get_all_status_codes() =>

    [sqzcolornum,fire_code] = calc_sqz()
    
    [cci_sect,ccis_movement_code] = calc_cci()
    
    [mom_sect,mom_osc_code] = calc_smi()
    
    [trend_dir,ob_os_flag,combined_status_code] = get_combined_trend(mom_osc_code,ccis_movement_code,mom_sect, cci_sect)
    
    adx_status_code = calc_ADX()
    
    erg_status_code = calc_SMI_Erg()

    [fire_code, combined_status_code, adx_status_code,erg_status_code]




    
show_strong_trend_alert_flags(trend_dir,ob_os_flag) =>
    combined_arrow_down = trend_dir == DOWN and show_strong_trend_alert and ob_os_flag

    combined_arrow_up = trend_dir == UP and show_strong_trend_alert and ob_os_flag

    [combined_arrow_up, combined_arrow_down]



get_status_code_trend_num(st) =>
    st == ADX_ENTER_LONG or st == ADX_LONG or st == ADX_EXIT_SHORT ? 1 : st == ADX_ENTER_SHORT or st == ADX_SHORT or st == ADX_EXIT_LONG ? -1 : 0


get_summary_trend_code(comb_code,adx_code,erg_code) =>
    st_num = get_status_code_trend_num(comb_code) + 
      get_status_code_trend_num(adx_code) + 
      get_status_code_trend_num(erg_code)
     
    
    summ_trend_code = st_num >= 1 ? ADX_LONG : st_num <= -1 ? ADX_SHORT : ADX_NEUTRAL
    
    
    any_long_entry = comb_code == ADX_ENTER_LONG or adx_code == ADX_ENTER_LONG or erg_code == ADX_ENTER_LONG
    
    any_short_entry = comb_code == ADX_ENTER_SHORT or adx_code == ADX_ENTER_SHORT or erg_code == ADX_ENTER_SHORT

    summ_trend_code := (summ_trend_code == ADX_LONG and any_long_entry )? ADX_ENTER_LONG :   
      (summ_trend_code == ADX_SHORT and any_short_entry) ? ADX_ENTER_SHORT :  summ_trend_code
    
    summ_trend_code
    
    

[fire_code, comb_code, adx_code,erg_code] = get_all_status_codes() 


summ_trend_code = get_summary_trend_code(comb_code,adx_code,erg_code)
[summ_txt, summ_col] = decodeADXCode(summ_trend_code)
        


summ_entry = summ_trend_code == ADX_ENTER_LONG or summ_trend_code == ADX_ENTER_SHORT


curr_active_pos = false
curr_active_pos := curr_active_pos[1]


buyCond = summ_trend_code == ADX_ENTER_LONG or summ_trend_code == ADX_LONG
sellCond = summ_trend_code == ADX_ENTER_SHORT or summ_trend_code == ADX_SHORT


validtrend = buyCond or sellCond

validlongentry = summ_trend_code == ADX_ENTER_LONG 
validshortentry = summ_trend_code == ADX_ENTER_SHORT 


enterLong = validlongentry  and not curr_active_pos
enterShort =  validshortentry and not curr_active_pos


curr_active_pos := (enterLong or enterShort) ? true :  curr_active_pos


longpos = buyCond  and  curr_active_pos 
shortpos = sellCond and  curr_active_pos

di_change = (longpos[1] and not buyCond) or (shortpos[1] and not sellCond) 
noTrade =  di_change or not validtrend 

exitLong = noTrade and longpos[1] and curr_active_pos[1]
exitShort = noTrade and shortpos[1] and curr_active_pos[1]


curr_active_pos := (exitLong or exitShort) ? false : curr_active_pos


final_summary_status_code = exitLong ? ADX_EXIT_LONG : exitShort ? ADX_EXIT_SHORT :  
     enterLong ? ADX_ENTER_LONG : enterShort ? ADX_ENTER_SHORT :  
     longpos ? ADX_LONG : shortpos ? ADX_SHORT : ADX_NEUTRAL


[fin_sum__txt, fin_summ_col] = decodeADXCode(final_summary_status_code)


[fire_sqz_txt, fcolor] = decodeSqzColorCode(fire_code)
firedown = fire_code != NOSQZ and shortpos
fireup =  fire_code != NOSQZ and longpos

fireneutral = fire_code != NOSQZ and not firedown  and not fireup


//FIRED SIGNALS
plotshape(firedown, title='Fired Short', style=shape.triangledown, location=location.abovebar, color=color.white, size=size.small)
plotshape(firedown, title='Fired Short circle', style=shape.circle, location=location.abovebar, color=fcolor, size=size.tiny)

plotshape(fireup, title='Fired Long', style=shape.triangleup, location=location.belowbar, color=color.white, size=size.small)
plotshape(fireup, title='Fired Long circle', style=shape.circle, location=location.belowbar, color=fcolor, size=size.tiny)

plotshape(fireneutral, title='Fired Neutral', style=shape.square, location=location.belowbar, color=color.gray, size=size.small)
plotshape(fireneutral, title='Fired Neutral circle', style=shape.circle, location=location.belowbar, color=fcolor, size=size.tiny)



bgcolor(color.new(fin_summ_col,transp=80))



// ---------- EMAs --------------

out8 = ema(source, 8)
plot(out8, title="EMA - 1", color=color.new(color.silver, transp = 0), linewidth=1)

out21 = ema(source, 21)
plot(out21, title="EMA - 2", color=color.new(color.aqua, transp = 0), linewidth=1)

out34 = ema(source, 34)
plot(out34, title="EMA - 3", color=color.new(color.blue, transp = 0), linewidth=1)

out55 = ema(source, 55)
plot(out55, title="EMA - 4", color=color.new(color.lime, transp = 0), linewidth=1)

out89 = ema(source, 89)
plot(out89, title="EMA - 5", color=color.new(color.yellow, transp = 0), linewidth=1)

out144 = ema(source, 144)
plot(out144, title="EMA - 6", color=color.new(color.red, transp = 0), linewidth=1)

//out233 = ema(source, 233)
//plot(out233, title="EMA - 7", color=color.yellow, linewidth=1, transp=0)



//----- Strategy

start     = timestamp(2021, 10, 1, 00, 00)            // backtest start  window
finish    = timestamp(2022, 12, 31, 00, 00)              // backtest finish window
window()  => time >= start and time <= finish ? true : false           // create function "within window of time"


strategy.entry("long", strategy.long, when = window() and enterLong)
strategy.close("long", when = window() and exitLong)


strategy.entry("short", strategy.short, when = window() and enterShort)
strategy.close("short", when = window() and exitShort)


