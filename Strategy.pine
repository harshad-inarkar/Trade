//@version=5
strategy(title='Strategy', shorttitle='Strategy', overlay=true, pyramiding=1, 
   calc_on_every_tick=false, initial_capital=1000000, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_value=0.025, process_orders_on_close=true)


india_tz = "Asia/Kolkata"

ci_length = input.int(21, title = "Chop L")
ci_threshold = input.int(44,title="Chop T")

var ignore_exit_alert = input(true, 'Ignore Exit Alert')

ordType = input('MKT', title='ordType')
productType = input('I', title='productType')

secret = input('ZLQdk',title='Secret')

var alert_type = input.string('regular_order', title='Alert Type', options=['no_order','regular_order','basket_order'])

long_basket_id = ''
exit_long_basket_id = ''
short_basket_id = ''
exit_short_basket_id = ''

basket_map = input("", title= "Basket Map")

basket_id = input("", title= "Basket id")

wh_long_script = input("", title= "U")
wh_short_script = input("", title= "D")

wh_close_long_script = input("", title= "XU")
wh_close_short_script = input("", title= "XD")


symb_bask_arr = str.split(basket_map,' ')

if array.size(symb_bask_arr) > 0
    for i=0 to array.size(symb_bask_arr) -1
        ele_arr = str.split(array.get(symb_bask_arr,i),'|')
        if array.get(ele_arr,0) == basket_id
            long_basket_id := array.get(ele_arr,1)
            exit_long_basket_id := array.get(ele_arr,2)
            short_basket_id := array.get(ele_arr,3)
            exit_short_basket_id := array.get(ele_arr,4)

source = close

// trailing SL

plot_only_trailing_sl = input(false,title='Plot only Trailing SL')
only_trailingsl_strat = input(false,title='Only Trailing SL Startegy')
atr_length = input(5, title='ATR Length')
atr_mult = input.float(1, title='ATR Mult')
lookback = input.int(5,title='lookback')
entry_perc = input.float(0.02,title='Entry Perc')
atr = ta.atr(atr_length)


len1 = input(8, title='MA_1')
len2 =  input(21, title='MA_2')
len3 =  input(55, title='MA_3')
len4= input(233,title='MA_4')
rsilen=input(8,title='RSI Len')
rsiMAlen = input(21,title='RSI MA Len')

lineup_check = input.int(3, title='Lineup Check', options=[1,2,3,4])
ma_filter = input.int(4, title='MA Filter', options=[1,2,3,4])
strict_confirm_trade_check = input.int(1, title='Strict confirm trade check', options=[0,1,2,3])
strict_psar = input(true, title='Strict PSAR')
strict_trailing_sl = input(false, title='Strict Trailing SL ')
strict_rsici_exit = input(true, title='Strict RSICI')

last_n_days = input.float(21,'Days')

show_only_window = input(true, title='Show trades in window')

MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000
start = timenow - MILLISECONDS_IN_DAY * last_n_days
window() =>  // create function "within window of time"
    time >= start 


long_signal_flag  = input(true, title='Long Signal')
short_signal_flag = input(true, title='Short Signal')

force_intraday_check = input(true, title='Force Intraday Check')
comm_timing = input('0905-2330' , title="Comm Timing")
eq_timing = input('0920-1530' , title="Eq Timing")


// OSc Constants
rad2degree = 180 / 3.14159265359
lookback_period = 1
smoothing = 3


RANGE_BACK_BARS = 20
osc_filter_range = 5.2
adx_filter_range = 8.8
erg_filter_range = 6


ci = 100 * math.log10(math.sum(ta.atr(1), ci_length) / (ta.highest(ci_length) - ta.lowest(ci_length))) / math.log10(ci_length)
nonchop = ci <=  ci_threshold 

comm_sym_list_str = input('CAPITALCOM:GOLD|VANTAGE:USDINR|JPYUSD|EURUSD|GBPUSD|USOIL|NATURALGAS|COPPER|', title="COMM List")

is_comm_symb() =>
    str.contains(comm_sym_list_str,syminfo.ticker+'|')

intraday_check = force_intraday_check and ((timeframe.isminutes and timeframe.multiplier < 15) or timeframe.isseconds) 
                  and (is_comm_symb() or syminfo.timezone == india_tz)


get_entry_period_str(is_comm_symb) =>
    is_comm_symb ? comm_timing : eq_timing


get_timeframe_minutes_int()=>
    num_back_bars = 1
    timeframe.isminutes ? (timeframe.multiplier * num_back_bars * 60 * 1000) :      
       timeframe.isseconds ? timeframe.multiplier * num_back_bars  * 1000 : 0


entry_period_str = get_entry_period_str(is_comm_symb())

check_if_exit_time() =>
    time_close >= time_close('D',entry_period_str,india_tz)-get_timeframe_minutes_int()


valid_entry_period =  intraday_check and (na(time(timeframe.period, entry_period_str,india_tz)) or check_if_exit_time())  ? false : true
valid_entry_period := valid_entry_period and (not show_only_window or window()) and nonchop

exit_all_pos_period = intraday_check and check_if_exit_time() ? true : false



// ---------- EMAs --------------

out1 = ta.rma(source, len1)
out2 = ta.rma(source, len2)
out3 = ta.rma(source, len3)
out4 = ta.rma(source, len4)


// ----- RSI ----

rsi = ta.rsi(source,rsilen)
rsiMA= ta.rma(rsi,rsiMAlen)


// OSc Code Consts

UP = 1
DOWN = 2
NEUTRAL = 0

YELLOW = 1
RED = 2
ORANGE = 3
NOSQZ = 0


//Sqz Code variables

calc_sqz() =>
    length = 20
    ma = ta.sma(source, length)
    devBB = ta.stdev(source, length)
    devKC = ta.sma(ta.tr, length)


    //Bollinger 2x
    upBB = ma + devBB * 2
    lowBB = ma - devBB * 2

    //Keltner 2x
    upKCWide = ma + devKC * 2
    lowKCWide = ma - devKC * 2

    //Keltner 1.5x
    upKCNormal = ma + devKC * 1.5
    lowKCNormal = ma - devKC * 1.5

    //Keltner 1x
    upKCNarrow = ma + devKC
    lowKCNarrow = ma - devKC

    sqzOnWide = lowBB >= lowKCWide and upBB <= upKCWide  //WIDE SQUEEZE: ORANGE
    sqzOnNormal = lowBB >= lowKCNormal and upBB <= upKCNormal  //NORMAL SQUEEZE: RED
    sqzOnNarrow = lowBB >= lowKCNarrow and upBB <= upKCNarrow  //NARROW SQUEEZE: YELLOW
    sqzOffWide = lowBB < lowKCWide and upBB > upKCWide  //FIRED WIDE SQUEEZE
    sqzOffNormal = lowBB < lowKCNormal and upBB > upKCNormal  //FIRED NORMAL SQUEEZE
    sqzOffNarrow = lowBB < lowKCNarrow and upBB > upKCNarrow  //FIRED NARROW SQUEEZE
    noSqz = sqzOnWide == false and sqzOffWide == false  //NO SQUEEZE

    fire_code = sqzOffNarrow and sqzOnNarrow[1] ? YELLOW : sqzOffNormal and sqzOnNormal[1] ? RED : sqzOffWide and sqzOnWide[1] ? ORANGE : NOSQZ


    sqzcolornum = noSqz ? NOSQZ : sqzOnNarrow ? YELLOW : sqzOnNormal ? RED : sqzOnWide ? ORANGE : NOSQZ


    [sqzcolornum, fire_code]


//------ End of Sqz Code--------

decodeSqzColorCode(st) =>
    col = st == YELLOW ? color.yellow : st == RED ? color.red : st == ORANGE ? color.orange : color.gray
    txt = st == YELLOW ? 'Yellow' : st == RED ? 'Red' : st == ORANGE ? 'Orange' : 'Nosqz'
    [txt, col]

decodeMovementCode(st) =>
    col = st == UP ? color.aqua : st == DOWN ? color.red : color.gray
    txt = st == UP ? 'Up' : st == DOWN ? 'Down' : 'Neutral'
    [txt, col]


angle(_src, osc_avg_tr) =>
    ang = rad2degree * math.atan((_src - nz(_src[lookback_period])) / (lookback_period * osc_avg_tr))
    ang


get_osc_trend_params(osc, osc_filter) =>
    osc_max = ta.highest(osc, RANGE_BACK_BARS)
    osc_min = ta.lowest(osc, RANGE_BACK_BARS)

    osc_avg_tr = osc_max - osc_min

    osc_ft = osc_filter
    osc_fb = -osc_ft

    osc_slope = ta.linreg(angle(osc, osc_avg_tr), smoothing, 0)
    trend = osc_slope >= osc_ft or osc >= osc_max ? UP : osc_slope <= osc_fb or osc <= osc_min? DOWN : NEUTRAL
    trend



get_osc_trend(osc) =>
    get_osc_trend_params(osc, osc_filter_range)

// Calc EMAs Trend

out1_trend = get_osc_trend(out1)
out2_trend = get_osc_trend(out2)
out3_trend = get_osc_trend(out3)



// RSI Bull/Bear Logic

rsi_trend = get_osc_trend(rsi)
rsi_bull_mom = (rsi > 50 and rsi > rsiMA) and rsi_trend == UP 
rsi_bear_mom = (rsi < 50 and rsi < rsiMA) and rsi_trend == DOWN

rsicross = ta.cross(rsi,50) or ta.cross(rsi,rsiMA)
rsi_bull_cross = rsi_bull_mom and rsicross 
rsi_bear_cross = rsi_bear_mom and rsicross


// ADX Code

STRAT_NEUTRAL = 0
STRAT_LONG = 1
STRAT_SHORT = 2
STRAT_ENTER_LONG = 3
STRAT_ENTER_SHORT = 4
STRAT_EXIT_LONG = 5
STRAT_EXIT_SHORT = 6

exitlong_col = color.new(color.yellow, transp=0)
exitshort_col = color.new(color.blue, transp=0)
enterlong_col = color.new(color.lime, transp=0)
entershort_col = color.new(color.red, transp=0)
longpos_col = color.new(color.aqua, transp=60)
shortpos_col = color.new(color.orange, transp=60)
neutral_col = color.new(color.gray, transp=60)

decodeStratCode(adx_code) =>
    adx_col = neutral_col
    adx_col := adx_code == STRAT_EXIT_LONG ? exitlong_col :   
     adx_code == STRAT_EXIT_SHORT ? exitshort_col :   
       adx_code == STRAT_ENTER_LONG ? enterlong_col :    
         adx_code == STRAT_ENTER_SHORT ? entershort_col :    
           adx_code == STRAT_LONG ? longpos_col :  
             adx_code == STRAT_SHORT ? shortpos_col : neutral_col


    adx_txt = adx_code == STRAT_EXIT_LONG ? 'ExUp' : adx_code == STRAT_EXIT_SHORT ? 'ExDn' : adx_code == STRAT_ENTER_LONG ? 'EnUp' : adx_code == STRAT_ENTER_SHORT ? 'EnDn' : adx_code == STRAT_LONG ? 'Up' : adx_code == STRAT_SHORT ? 'Dn' : 'Na'

    [adx_txt, adx_col]






    
_inRange(cond) =>
    rangeUpper = 60
    rangeLower = 5
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

calc_divergence() =>
    lbR = 5
    lbL = 5
    
    plFound = na(ta.pivotlow(rsi, lbL, lbR)) ? false : true
    phFound = na(ta.pivothigh(rsi, lbL, lbR)) ? false : true
    

    //------------------------------------------------------------------------------
    // Regular Bullish
    // rsi: Higher Low
    
    rsiHL = rsi[lbR] > ta.valuewhen(plFound, rsi[lbR], 1) and _inRange(plFound[1])
    
    // Price: Lower Low
    
    priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1)
    bullCond =  priceLL and rsiHL and plFound
    
   
    //------------------------------------------------------------------------------
    // Regular Bearish
    // rsi: Lower High
    
    rsiLH = rsi[lbR] < ta.valuewhen(phFound, rsi[lbR], 1) and _inRange(phFound[1])
    
    // Price: Higher High
    
    priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)
    
    bearCond = priceHH and rsiLH and phFound
    
   
   // END
    
    
    current_trend = NEUTRAL
    active_position = false
    longpos = false
    shortpos = false
    
    
    current_trend := bullCond ? UP : bearCond ? DOWN : current_trend[1]
    
    
    diPositive = current_trend == UP
    diNegative = current_trend == DOWN
    
    
    buyCond = diPositive
    sellCond = diNegative
    
    
    validlongentry = rsi_bull_mom and buyCond
    validshortentry = rsi_bear_mom and sellCond
    
    
    // di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1])
    
    
    di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1])
    
    validtrend = buyCond or sellCond
    
    closetrend = (shortpos[1] and rsi_bull_mom) or ( longpos[1] and rsi_bear_mom )
    
    
    noTradeZone = not validtrend or di_crossover or closetrend
    
    current_trend := closetrend ? NEUTRAL : current_trend
    
    active_position := (validlongentry or validshortentry) and not active_position[1] ? true : noTradeZone ? false : active_position[1]
    
    
    enterLong = validlongentry and not active_position[1]
    enterShort = validshortentry and not active_position[1]
    
    
    longpos := buyCond and active_position
    shortpos := sellCond and active_position
    
    
    exitLong = noTradeZone and longpos[1]
    exitShort = noTradeZone and shortpos[1]


    div_status_code = exitLong ? STRAT_EXIT_LONG : exitShort ? STRAT_EXIT_SHORT : enterLong ? STRAT_ENTER_LONG : enterShort ? STRAT_ENTER_SHORT : longpos ? STRAT_LONG : shortpos ? STRAT_SHORT : STRAT_NEUTRAL

    div_status_code




calc_RSICI() =>

    rsima_bull_mom = (rsiMA >= 50 and rsi >= rsiMA) //and rsi_trend == UP 
    rsima_bear_mom = (rsiMA < 50 and rsi <= rsiMA) //and rsi_trend == DOWN 

    current_trend = NEUTRAL
    active_position = false
    longpos = false
    shortpos = false


    buyCond = rsiMA >= 50
    sellCond = rsiMA < 50


    current_trend := buyCond ? UP : sellCond ? DOWN : current_trend[1]


    diPositive = current_trend == UP
    diNegative = current_trend == DOWN


    validlongentry =  rsima_bull_mom and nonchop
    validshortentry = rsima_bear_mom and nonchop


    // di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1])


    di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1])

    validtrend = buyCond or sellCond

    closetrend = (shortpos[1] and rsima_bull_mom) or ( longpos[1] and rsima_bear_mom )


    noTradeZone = not validtrend or di_crossover or closetrend

    current_trend := closetrend ? NEUTRAL : current_trend

    active_position := (validlongentry or validshortentry) and not active_position[1] ? true : noTradeZone ? false : active_position[1]


    enterLong = validlongentry and not active_position[1]
    enterShort = validshortentry and not active_position[1]


    longpos := buyCond and active_position
    shortpos := sellCond and active_position


    exitLong = noTradeZone and longpos[1]
    exitShort = noTradeZone and shortpos[1]


    status_code = exitLong ? STRAT_EXIT_LONG : exitShort ? STRAT_EXIT_SHORT : enterLong ? STRAT_ENTER_LONG : enterShort ? STRAT_ENTER_SHORT : longpos ? STRAT_LONG : shortpos ? STRAT_SHORT : STRAT_NEUTRAL

    status_code





calc_ADX() =>
    adx_len = 14
    adx_lensig = 14

    // Get ADX, PDI and MDI values
    [plus, minus, adx] = ta.dmi(adx_len, adx_lensig)


    adxentrylevel = 60
    adxlowerlevel = 9

    
    adx_going_low = adx < plus and adx < minus
    adx_trend = get_osc_trend_params(adx, adx_filter_range)


    diPositive = plus > minus
    diNegative = not diPositive
    

    adxinside = diPositive and adx >= minus and adx <= plus or diNegative and adx >= plus and adx <= minus

    adxvalidtrend = adx_trend == UP or adx_trend == NEUTRAL
    

    adxvalidtrendentry = (adx >= adxlowerlevel and adx <= adxentrylevel and adx_trend == NEUTRAL) or adxinside or  adx_trend == UP
    
    // adxvalidtrendentry =  adxinside or  adx_trend == UP
    

    buyCond = diPositive and adxvalidtrend
    sellCond = diNegative and adxvalidtrend


    adxJustCrossed = ta.cross(adx, plus) or ta.cross(adx, minus)

    adxjustout = adxinside[1] and not adxinside
    adxjustin = not adxinside[1] and adxinside

    di_crossover = (diNegative[1] and diPositive) or (diNegative and diPositive[1])


    validlongentry = buyCond and adxvalidtrendentry
    validshortentry = sellCond and adxvalidtrendentry

    noTradeZone = not adxvalidtrend or di_crossover


    active_position = false
    active_position := (validlongentry or validshortentry) and not active_position[1] ? true : noTradeZone ? false : active_position[1]


    enterLong = validlongentry and not active_position[1]
    enterShort = validshortentry and not active_position[1]


    longpos = buyCond and active_position
    shortpos = sellCond and active_position


    exitLong = noTradeZone and longpos[1]
    exitShort = noTradeZone and shortpos[1]

    adx_status_code = exitLong ? STRAT_EXIT_LONG : exitShort ? STRAT_EXIT_SHORT : enterLong ? STRAT_ENTER_LONG : enterShort ? STRAT_ENTER_SHORT : longpos ? STRAT_LONG : shortpos ? STRAT_SHORT : STRAT_NEUTRAL

    adx_status_code






//----- SMI Ergo

calc_SMI_Erg() =>
    erg_longlen = 13
    erg_shortlen = 8
    erg_siglen = 13
    erg_smoothing = 3

    erg1 = ta.tsi(source, erg_shortlen, erg_longlen)

    erg = ta.ema(erg1, erg_smoothing)

    sig = ta.rma(erg1, erg_siglen)

    erg_trend = get_osc_trend_params(erg, erg_filter_range)

    erg_validlong = erg_trend == UP
    erg_validshort = erg_trend == DOWN

    erg_diPositive = erg > sig
    erg_diNegative = not erg_diPositive


    erg_di_crossover = erg_diNegative[1] and erg_diPositive or erg_diNegative and erg_diPositive[1]


    erg_buyCond = erg_diPositive and erg_trend != DOWN
    erg_sellCond = erg_diNegative and erg_trend != UP


    ergvalidtrend = erg_buyCond or erg_sellCond

    erg_validlongentry = erg_buyCond and erg_validlong
    erg_validshortentry = erg_sellCond and erg_validshort

    erg_noTradeZone = not ergvalidtrend or erg_di_crossover


    erg_active_position = false
    erg_active_position := (erg_validlongentry or erg_validshortentry) and not erg_active_position[1] ? true : erg_noTradeZone ? false : erg_active_position[1]


    erg_enterLong = erg_validlongentry and not erg_active_position[1]
    erg_enterShort = erg_validshortentry and not erg_active_position[1]


    erg_longpos = erg_buyCond and erg_active_position
    erg_shortpos = erg_sellCond and erg_active_position


    erg_exitLong = erg_noTradeZone and erg_longpos[1]
    erg_exitShort = erg_noTradeZone and erg_shortpos[1]


    erg_status_code = erg_exitLong ? STRAT_EXIT_LONG : erg_exitShort ? STRAT_EXIT_SHORT : erg_enterLong ? STRAT_ENTER_LONG : erg_enterShort ? STRAT_ENTER_SHORT : erg_longpos ? STRAT_LONG : erg_shortpos ? STRAT_SHORT : STRAT_NEUTRAL

    erg_status_code



calc_psar() =>
    psar_start = 0.02
    increment = 0.02
    maximum = 0.2
    psar = ta.sar(psar_start, increment, maximum)

    psar_trend = get_osc_trend(psar)
    [dum_txt, psar_color] = decodeMovementCode(psar_trend)


    psar_validlong =  not strict_psar or psar_trend == UP
    psar_validshort = not strict_psar or psar_trend == DOWN

    psar_diPositive = psar < source
    psar_diNegative = not psar_diPositive


    psar_di_crossover = psar_diNegative[1] and psar_diPositive or psar_diNegative and psar_diPositive[1]


    psar_buyCond = psar_diPositive
    psar_sellCond = psar_diNegative

    ergvalidtrend = psar_buyCond or psar_sellCond

    psar_validlongentry = psar_buyCond and psar_validlong
    psar_validshortentry = psar_sellCond and psar_validshort

    psar_noTradeZone = not ergvalidtrend or psar_di_crossover


    psar_active_position = false
    psar_active_position := (psar_validlongentry or psar_validshortentry) and not psar_active_position[1] ? true : psar_noTradeZone ? false : psar_active_position[1]


    psar_enterLong = psar_validlongentry and not psar_active_position[1]
    psar_enterShort = psar_validshortentry and not psar_active_position[1]


    psar_longpos = psar_buyCond and psar_active_position
    psar_shortpos = psar_sellCond and psar_active_position


    psar_exitLong = psar_noTradeZone and psar_longpos[1]
    psar_exitShort = psar_noTradeZone and psar_shortpos[1]


    psar_status_code = psar_exitLong ? STRAT_EXIT_LONG : psar_exitShort ? STRAT_EXIT_SHORT : psar_enterLong ? STRAT_ENTER_LONG : psar_enterShort ? STRAT_ENTER_SHORT : psar_longpos ? STRAT_LONG : psar_shortpos ? STRAT_SHORT : STRAT_NEUTRAL


    psar_status_code


checkEMA(isLong,isPriceEMA) =>
    valid = false
    
    if only_trailingsl_strat
        valid := true
    else
        extra_ma_long_filter = switch ma_filter
            4 => source >= out4
            3 => source >= out3
            2 => source >= out2 
            1 => source >= out1
                                
        extra_ma_short_filter = switch ma_filter
            4 => source <= out4
            3 => source <= out3
            2 => source <= out2 
            1 => source <= out1
        
        
        extra_long_check = out1_trend == UP and extra_ma_long_filter
        extra_short_check = out1_trend == DOWN and extra_ma_short_filter
        
        if lineup_check >= 2
            extra_long_check := extra_long_check and out2_trend == UP and  out1 >= out2
            extra_short_check := extra_short_check and out2_trend == DOWN and  out1 <= out2
        
        if lineup_check >= 3
            strict_long_ma_check =  (source >= out3 and out1 >= out2 and out2 >= out3 )
            strict_short_ma_check = (source <= out3 and out1 <= out2 and out2 <= out3 )
            
            if lineup_check == 4
                strict_long_ma_check  := source >= out4 and out3 >= out4 and strict_long_ma_check
                strict_short_ma_check := source <= out4 and out3 <= out4 and strict_short_ma_check
                
            extra_long_check  :=  extra_long_check  and strict_long_ma_check
            extra_short_check :=  extra_short_check and strict_short_ma_check
    
        
        if isLong 
            if extra_long_check or (isPriceEMA and source >= out2 ) 
                valid := true
                valid
        else if extra_short_check or (isPriceEMA and source <= out2 )
            valid := true
            valid
    

    valid


get_trend_num(trend_code) =>
    trend_code == UP ? 1 : trend_code == DOWN ? -1 : 0


get_all_status_codes() =>
    
    
    
    [sqzcolornum, fire_code] = calc_sqz()

    adx_status_code = calc_ADX()

    erg_status_code = calc_SMI_Erg()

    psar_status_code = calc_psar()

    [fire_code, adx_status_code, erg_status_code, psar_status_code]



get_status_code_trend_num(st) =>
    st == STRAT_ENTER_LONG or st == STRAT_LONG ? 1 : st == STRAT_ENTER_SHORT or st == STRAT_SHORT ? -1 : 0


get_summary_trend_code(adx_code, erg_code, psar_code,trailing_code) =>
    
    summ_trend_code = STRAT_NEUTRAL
    
    if not only_trailingsl_strat
        adx_num = get_status_code_trend_num(adx_code)
        erg_num = get_status_code_trend_num(erg_code)
        psar_num =get_status_code_trend_num(psar_code)
        
        st_num = adx_num + erg_num + psar_num
        repeat_st_num = adx_num == erg_num or adx_num == psar_num ? adx_num : erg_num == psar_num ? erg_num : 0
        
        summ_trend_code := st_num >= 1 ? STRAT_LONG : st_num <= -1 ? STRAT_SHORT : STRAT_NEUTRAL
        
        if repeat_st_num == adx_num
            summ_trend_code := repeat_st_num == 1  ? STRAT_ENTER_LONG : repeat_st_num == -1  ? STRAT_ENTER_SHORT : summ_trend_code
    else
        trailing_long = trailing_code == STRAT_LONG or trailing_code == STRAT_ENTER_LONG
        summ_trend_code := trailing_long ?  STRAT_ENTER_LONG : STRAT_ENTER_SHORT

    summ_trend_code
    

calc_trailingsl() =>
    pos = 0
    trailing_sl = 0.0

    // Signals
    long_signal = nz(pos[1]) != 1 and source > nz(trailing_sl[1])
    short_signal = nz(pos[1]) != -1 and source < nz(trailing_sl[1])
    
    // Calculate SL
    
    lowestLow = ta.lowest(low, lookback)
    highestHigh = ta.highest(high, lookback)
    longStop = lowestLow - atr * atr_mult
    shortStop = highestHigh + atr * atr_mult
    
    trailing_sl := short_signal ? shortStop : long_signal ? longStop : 
                 nz(pos[1]) == 1 ? math.max(longStop, nz(trailing_sl[1])) :
                 nz(pos[1]) == -1 ? math.min(shortStop, nz(trailing_sl[1])) :
                 nz(trailing_sl[1])
    
    // Position var               
    pos := long_signal ? 1 : short_signal ? -1 : nz(pos[1])
    
    trailing_code = long_signal? STRAT_ENTER_LONG : short_signal ? STRAT_ENTER_SHORT : pos == 1 ? STRAT_LONG : STRAT_SHORT
    
    [trailing_code, trailing_sl]


rsici_code = calc_RSICI()

[fire_code, adx_code, erg_code, psar_code] = get_all_status_codes()

[trailing_code, trailing_sl] = calc_trailingsl()

summ_trend_code = get_summary_trend_code(adx_code, erg_code, psar_code,trailing_code)
[summ_txt, summ_col] = decodeStratCode(summ_trend_code)


curr_active_pos = false
longpos = false
shortpos = false

curr_active_pos := curr_active_pos[1]




buyCond = (summ_trend_code == STRAT_ENTER_LONG or summ_trend_code == STRAT_LONG) and  checkEMA(true, true)
 
sellCond = (summ_trend_code == STRAT_ENTER_SHORT or summ_trend_code == STRAT_SHORT)  and checkEMA(false, true)

if strict_rsici_exit
    longrsici =  (rsici_code == STRAT_ENTER_LONG or rsici_code == STRAT_LONG or rsici_code == STRAT_EXIT_SHORT)
    shortrsici = (rsici_code == STRAT_ENTER_SHORT or rsici_code == STRAT_SHORT or rsici_code == STRAT_EXIT_LONG)
    
    buyCond := longrsici
    sellCond := shortrsici

neutralCond = not buyCond and not sellCond


trailing_long = trailing_code == STRAT_LONG or trailing_code == STRAT_ENTER_LONG
trailing_short = trailing_code == STRAT_SHORT or trailing_code == STRAT_ENTER_SHORT


validlongentry = summ_trend_code == STRAT_ENTER_LONG and checkEMA(true,false) and valid_entry_period 
validshortentry = summ_trend_code == STRAT_ENTER_SHORT and checkEMA(false,false) and valid_entry_period


enterLong = validlongentry and not curr_active_pos and long_signal_flag
enterShort = validshortentry and not curr_active_pos and short_signal_flag


curr_active_pos := enterLong or enterShort ? true : curr_active_pos

longpos := curr_active_pos and (buyCond or longpos[1] and neutralCond)
shortpos := curr_active_pos and (sellCond or shortpos[1] and neutralCond)

trailing_sl_exit_cond = strict_trailing_sl and ((longpos[1] and trailing_long[1] and trailing_short ) or (shortpos[1] and trailing_short[1] and trailing_long) )

di_change = (longpos[1] and sellCond) or (shortpos[1] and buyCond) or trailing_sl_exit_cond

noTrade = di_change or exit_all_pos_period

exitLong = noTrade and longpos[1]  and curr_active_pos[1]
exitShort = noTrade and shortpos[1] and curr_active_pos[1]


curr_active_pos := exitLong or exitShort ? false : curr_active_pos


final_summary_status_code = exitLong ? STRAT_EXIT_LONG : exitShort ? STRAT_EXIT_SHORT : enterLong ? STRAT_ENTER_LONG : enterShort ? STRAT_ENTER_SHORT : longpos ? STRAT_LONG : shortpos ? STRAT_SHORT : STRAT_NEUTRAL


[fire_sqz_txt, fcolor] = decodeSqzColorCode(fire_code)

openpos = shortpos or longpos
firedown = fire_code != NOSQZ and openpos and out1_trend == DOWN
fireup = fire_code != NOSQZ and openpos and out1_trend == UP


//FIRED SIGNALS
plotshape(firedown, title='Fired Long', style=shape.triangledown, location=location.abovebar, color=color.new(color.white, 0), size=size.small)
plotshape(firedown, title='Fired Short circle', style=shape.circle, location=location.abovebar, color=fcolor, size=size.tiny)

plotshape(fireup, title='Fired Long', style=shape.triangleup, location=location.belowbar, color=color.new(color.white, 0), size=size.small)
plotshape(fireup, title='Fired Long circle', style=shape.circle, location=location.belowbar, color=fcolor, size=size.tiny)



// TMA Code

bull_mom =  rsi_bull_mom //or out1_trend == UP or longpos or out1 >= out2   //and openpos
bear_mom =  rsi_bear_mom //or out1_trend == DOWN or shortpos or out1 <= out2  //and openpos

// ### 3 Line Strike

bearSig3 = close[3] > open[3] and close[2] >= open[2] and close[1] > open[1] and close < open[1] 
bullSig3 = close[3] < open[3] and close[2] <= open[2] and close[1] < open[1] and close > open[1]


// ### 2 Line Strike

bearSig2 = close[2] >= open[2] and close[1] > open[1] and close < open[1] 
bullSig2 = close[2] <= open[2] and close[1] < open[1] and close > open[1]


// End ###

//### Engulfing Candles


openBarPrevious = open[1]
closeBarPrevious = close[1]
openBarCurrent = open
closeBarCurrent = close


bullishEngulfing = closeBarCurrent > openBarCurrent and (low <= closeBarPrevious or openBarCurrent <= closeBarPrevious) and openBarCurrent < openBarPrevious and closeBarCurrent > openBarPrevious
bearishEngulfing = closeBarCurrent < openBarCurrent and (high >= closeBarPrevious or openBarCurrent >= closeBarPrevious) and openBarCurrent > openBarPrevious and closeBarCurrent < openBarPrevious


triple_bull_sig = bull_mom and bullishEngulfing and bullSig3
triple_bear_sig = bear_mom and bearishEngulfing and bearSig3

double_bull_sig = bull_mom and bullishEngulfing and bullSig2 and not triple_bull_sig
double_bear_sig = bear_mom and bearishEngulfing and bearSig2 and not triple_bear_sig

only_triple_bull = bull_mom and bullSig3 and not triple_bull_sig
only_triple_bear = bear_mom and bearSig3 and not triple_bear_sig

plotshape(only_triple_bull, style=shape.triangleup, color=color.new(color.green, 0), location=location.belowbar, size=size.small)
plotshape(only_triple_bear, style=shape.triangledown, color=color.new(color.red, 0), location=location.abovebar, size=size.small)


plotshape(double_bull_sig, style=shape.triangleup, location=location.belowbar, color=color.new(color.green, 0), size=size.tiny)
plotshape(double_bear_sig, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.tiny)
plotshape(double_bull_sig, style=shape.triangleup, color=color.new(color.green, 0), location=location.belowbar, size=size.small)
plotshape(double_bear_sig, style=shape.triangledown, color=color.new(color.red, 0), location=location.abovebar, size=size.small)


plotshape(triple_bull_sig, style=shape.diamond, location=location.belowbar, color=color.new(color.green, 0), size=size.small)
plotshape(triple_bear_sig, style=shape.diamond, location=location.abovebar, color=color.new(color.red, 0), size=size.small)


plotshape(rsi_bull_cross, style=shape.labelup, location=location.belowbar, color=exitshort_col, size=size.small)
plotshape(rsi_bear_cross, style=shape.labeldown, location=location.abovebar, color=exitlong_col, size=size.small)


div_st_code = calc_divergence()

[div_txt, div_col] = decodeStratCode(div_st_code)

plotshape(div_st_code == STRAT_ENTER_LONG, style=shape.labelup, text='D',location=location.belowbar, color=div_col, size=size.tiny)
plotshape(div_st_code == STRAT_ENTER_SHORT, style=shape.labeldown,text='D', location=location.abovebar, color=div_col, size=size.tiny)


// trailing SL

[ trail_txt, trail_col] = decodeStratCode(trailing_code)

plotshape(trailing_code == STRAT_ENTER_LONG, style=shape.labelup, text='T',location=location.belowbar, color=trail_col, size=size.tiny)
plotshape(trailing_code == STRAT_ENTER_SHORT, style=shape.labeldown,text='T', location=location.abovebar, color=trail_col, size=size.tiny)



//----- Strategy


// last_n_days = input(60,'Last n Days')
// MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000
// start = timenow - MILLISECONDS_IN_DAY * last_n_days
// finish =  timestamp(2030, 01, 01, 00, 00) 
// window() =>  // create function "within window of time"
//     time >= start and time <= finish ? true : false


calc_trigger_entry(f_st) =>
    
    f_enterLong = f_st == STRAT_ENTER_LONG
    f_enterShort = f_st == STRAT_ENTER_SHORT
    
    f_exitLong = f_st == STRAT_EXIT_LONG
    f_exitShort = f_st == STRAT_EXIT_SHORT
    
    
    curr_long_entry_val = float(na)
    curr_short_entry_val = float(na)
    
    curr_long_entry_val := curr_long_entry_val[1]
    curr_short_entry_val := curr_short_entry_val[1]
    
    if f_enterLong[1]
        high_3 = math.max(high[1],high[2],high) 
        long_entry_val = high_3
        curr_long_entry_val :=  long_entry_val + (atr * atr_mult)
    
    if f_enterShort[1]
        low_3 = math.min(low[1],low[2],low)
        short_entry_val = low_3
        curr_short_entry_val := short_entry_val - (atr * atr_mult)
    
    
    if f_exitLong
        curr_long_entry_val := float(na)
    
    if f_exitShort
        curr_short_entry_val := float(na)
    
    
    trigg_active_pos = false
    trigg_longpos = false
    trigg_shortpos = false
    trigg_active_pos := trigg_active_pos[1]
    
    
    first_trigg_enterLong = not trigg_active_pos and not na(curr_long_entry_val) and source > curr_long_entry_val and barstate.isconfirmed
    first_trigg_enterShort = not trigg_active_pos and not na(curr_short_entry_val) and source < curr_short_entry_val and barstate.isconfirmed
    
 
    first_long_entry_val = float(na)
    first_short_entry_val = float(na)
    
    first_long_entry_val := first_long_entry_val[1]
    first_short_entry_val := first_short_entry_val[1]
    
    first_long_entry_val := (first_trigg_enterLong and na(first_long_entry_val)) ? high  : first_long_entry_val 
    first_short_entry_val := (first_trigg_enterShort and na(first_short_entry_val)) ? low  : first_short_entry_val
    

    if f_exitLong
        first_long_entry_val := float(na)
    
    if f_exitShort
        first_short_entry_val := float(na)
    
   
    second_trigg_enterLong = not trigg_active_pos and not na(first_long_entry_val) and source > first_long_entry_val and barstate.isconfirmed
    second_trigg_enterShort = not trigg_active_pos and not na(first_short_entry_val) and source < first_short_entry_val and barstate.isconfirmed
  
    second_long_entry_val = float(na)
    second_short_entry_val = float(na)
    
    second_long_entry_val := second_long_entry_val[1]
    second_short_entry_val := second_short_entry_val[1]
    
    second_long_entry_val := (second_trigg_enterLong and na(second_long_entry_val)) ? high  : second_long_entry_val 
    second_short_entry_val := (second_trigg_enterShort and na(second_short_entry_val)) ? low : second_short_entry_val
    

    if f_exitLong
        second_long_entry_val := float(na)
    
    if f_exitShort
        second_short_entry_val := float(na)
    
   
    third_trigg_enterLong = not trigg_active_pos and not na(second_long_entry_val) and source > second_long_entry_val and barstate.isconfirmed
    third_trigg_enterShort = not trigg_active_pos and not na(second_short_entry_val) and source < second_short_entry_val and barstate.isconfirmed
    
    trigg_enterLong = strict_confirm_trade_check == 1 ? first_trigg_enterLong : strict_confirm_trade_check == 2 ? second_trigg_enterLong : third_trigg_enterLong
    trigg_enterShort = strict_confirm_trade_check == 1 ? first_trigg_enterShort : strict_confirm_trade_check == 2 ? second_trigg_enterShort : third_trigg_enterShort
    
    
    trigg_active_pos := trigg_enterLong or trigg_enterShort ? true : trigg_active_pos
    
    trigg_longpos := trigg_active_pos and (trigg_enterLong or trigg_longpos[1])
    trigg_shortpos := trigg_active_pos and (trigg_enterShort or trigg_shortpos[1])
    
    
    trigg_exitLong = f_exitLong and trigg_active_pos
    trigg_exitShort = f_exitShort and trigg_active_pos
    
    
    trigg_active_pos := trigg_exitLong or trigg_exitShort ? false : trigg_active_pos
    
    
    trigg_status_code = trigg_exitLong ? STRAT_EXIT_LONG : trigg_exitShort ? STRAT_EXIT_SHORT : trigg_enterLong ? STRAT_ENTER_LONG : trigg_enterShort ? STRAT_ENTER_SHORT : trigg_longpos ? STRAT_LONG : trigg_shortpos ? STRAT_SHORT : STRAT_NEUTRAL
    
    trigg_status_code
    


trigg_status_code = calc_trigger_entry(final_summary_status_code)
fin_status_code = strict_confirm_trade_check !=0 ? trigg_status_code : final_summary_status_code

[fin_txt, fin_status_col] = decodeStratCode(fin_status_code)

bgcolor(color.new(fin_status_col, transp=80))


final_long_pos = (fin_status_code == STRAT_LONG or fin_status_code == STRAT_ENTER_LONG or fin_status_code == STRAT_EXIT_LONG )
final_short_pos = (fin_status_code == STRAT_SHORT or fin_status_code == STRAT_ENTER_SHORT or fin_status_code == STRAT_EXIT_SHORT )

final_open_pos = final_long_pos or final_short_pos


plot( (plot_only_trailing_sl and final_open_pos) ? trailing_sl : na, linewidth = 2, color = final_long_pos ? color.green : final_short_pos ? color.red : color(na))

plot(plot_only_trailing_sl? na : out1, title='RMA - 1', color=color.new(color.silver, transp=0), linewidth=2)
plot(plot_only_trailing_sl? na : out2, title='RMA - 2', color=color.new(color.aqua, transp=0), linewidth=2)
plot(plot_only_trailing_sl? na : out3, title='RMA - 3', color=color.new(color.yellow, transp=0), linewidth=2)
plot(plot_only_trailing_sl? na : out4, title='RMA - 4', color=color.new(color.red, transp=0), linewidth=2)



final_enterLong = fin_status_code == STRAT_ENTER_LONG
final_enterShort = fin_status_code == STRAT_ENTER_SHORT

final_exitLong = fin_status_code == STRAT_EXIT_LONG
final_exitShort = fin_status_code == STRAT_EXIT_SHORT


sep = ' : '

quant = 1 

price = ordType == 'MKT' ? '0' : str.tostring(source)


long_txt = wh_long_script
close_long_txt = wh_close_long_script
short_txt = wh_short_script
close_short_txt = wh_close_short_script



comm_bask_txt = "\"secret\":\"{0}\",\"alertType\":\"basket\",\"basket_id\":\"{1}\""

long_basket_txt = "\{" + str.format(comm_bask_txt,secret,long_basket_id) + "\}"
exit_long_basket_txt = "\{" + str.format(comm_bask_txt,secret,exit_long_basket_id) + "\}"

short_basket_txt = "\{" + str.format(comm_bask_txt,secret,short_basket_id) + "\}"
exit_short_basket_txt = "\{" + str.format(comm_bask_txt,secret,exit_short_basket_id) + "\}"


raise_wh_alert(wh_txt,ord_type) =>
    alert(ord_type + sep + str.tostring(source) , freq=alert.freq_once_per_bar_close)

    ignore_alert = ignore_exit_alert and (ord_type == 'XU' or ord_type == 'XD')

    if not ignore_alert
        alert(wh_txt, freq=alert.freq_once_per_bar_close)



if final_enterLong
    strategy.entry('long', strategy.long,qty=quant)
    switch alert_type
        "basket_order" => raise_wh_alert(long_basket_txt,'U')
        "regular_order" => raise_wh_alert(long_txt,'U')
    


if final_exitLong
    strategy.cancel_all()

if final_exitLong
    strategy.close('long')
 
    switch alert_type
        "basket_order" => raise_wh_alert(exit_long_basket_txt,'XU')
        "regular_order" => raise_wh_alert(close_long_txt,'XU')
    

if final_enterShort
    strategy.entry('short', strategy.short,qty=quant)
    
    switch alert_type
        "basket_order" => raise_wh_alert(short_basket_txt,'D')
        "regular_order" => raise_wh_alert(short_txt,'D')
    
if final_exitShort
    strategy.cancel_all()
    
if final_exitShort
    strategy.close('short')

    switch alert_type
        "basket_order" => raise_wh_alert(exit_short_basket_txt,'XD')
        "regular_order" => raise_wh_alert(close_short_txt,'XD')
    

if not window()
    strategy.cancel_all()


calc_points(runup,abs_size) =>
    (runup/abs_size)
    
var first_occ = false

if barstate.islast and (barstate.isconfirmed or not first_occ)
    
    first_occ := true

    total_closetrades = strategy.closedtrades
    total_opentrades = strategy.opentrades


    maxpoints = 0.0
    total_down_points = 0.0
    total_profit_points = 0.0
    onlyprof = 0.0
    wintrades = 0

    max_pct = 0.0
    down_pct = 0.0
    prof_pct = 0.0
    onlyprofpct = 0.0
    
    if total_closetrades > 0
        for i=0 to total_closetrades-1
            act_size = strategy.closedtrades.size(i) * syminfo.pointvalue
            abs_size = math.abs(act_size)
            runup = strategy.closedtrades.max_runup(i)
            entry_price = strategy.closedtrades.entry_price(i) * abs_size
            short_buy_price = act_size < 0 ? (entry_price - runup)  : 0
            buy_price =  act_size > 0 ? entry_price : short_buy_price
            
            profit = strategy.closedtrades.profit(i)
    
            
            runuppoints = calc_points(runup,abs_size)
            maxpoints := maxpoints + runuppoints
            
            profitpoints =  calc_points(profit,abs_size)
            total_profit_points := total_profit_points + profitpoints
            
            buypoints = calc_points(buy_price,abs_size)
            max_pct := max_pct + (runuppoints*100/buypoints)
            curr_prof_pct = (profitpoints*100/buypoints)
            prof_pct := prof_pct + curr_prof_pct
            
            if profitpoints >= 0
                onlyprof :=  onlyprof + profitpoints
                onlyprofpct :=  onlyprofpct + curr_prof_pct
                wintrades := wintrades + 1
            
        
    
    if total_opentrades > 0
        for i=0 to total_opentrades-1
            act_size = strategy.opentrades.size(i) * syminfo.pointvalue
            abs_size = math.abs(act_size)
            runup = strategy.opentrades.max_runup(i)
            entry_price = strategy.opentrades.entry_price(i) * abs_size
            short_buy_price = act_size < 0 ? (entry_price - runup)  : 0
            buy_price =  act_size > 0 ? entry_price : short_buy_price
        
            profit = strategy.opentrades.profit(i)


            runuppoints = calc_points(runup,abs_size)
            maxpoints := maxpoints + runuppoints
            

            profitpoints =  calc_points(profit,abs_size)
            total_profit_points := total_profit_points + profitpoints
            
            buypoints = calc_points(buy_price,abs_size)
            max_pct := max_pct + (runuppoints*100/buypoints)
            curr_prof_pct = (profitpoints*100/buypoints)
            prof_pct := prof_pct + curr_prof_pct
            
            if profitpoints >= 0
                onlyprof :=  onlyprof + profitpoints
                onlyprofpct :=  onlyprofpct + curr_prof_pct

                wintrades := wintrades + 1
 
            
    
    total_trades = total_closetrades + total_opentrades
    
    max_run_pct_avg = total_trades > 0 ? math.round(max_pct/total_trades,2) : 0  
    winrate = total_trades > 0 ?  math.round(wintrades/total_trades,2) : 0.0
        
    // label.new(bar_index, high, text= str.tostring(math.round(maxrunup,2)) + " | "+  str.tostring(total_trades) + " | "+ str.tostring(max_run_avg))
    var table tbl1 = table.new(position.top_right, 2, 10, frame_color=color(na), frame_width=1, border_width=2, border_color=color(na))

    table.cell(tbl1, 0, 0, 'Trades', text_halign=text.align_center, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 0, 1, 'MaxPct', text_halign=text.align_center, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 0, 2, 'MaxPCTAvg', text_halign=text.align_center, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 0, 3, 'WinRate', text_halign=text.align_center, bgcolor=color(na), text_color=color.white, text_size=size.small)

   
    table.cell(tbl1, 1, 0, str.tostring(total_trades), text_halign=text.align_left, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 1, 1, str.tostring(math.round(max_pct,2)), text_halign=text.align_left, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 1, 2, str.tostring(max_run_pct_avg), text_halign=text.align_left, bgcolor=color(na), text_color=color.white, text_size=size.small)
    table.cell(tbl1, 1, 3, str.tostring(winrate), text_halign=text.align_left, bgcolor=color(na), text_color=color.white, text_size=size.small)

    
